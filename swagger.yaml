openapi: 3.0.0
info:
  title: Tempo API
  version: '0.0'
paths:
  /users:
    get:
      summary: Get all users
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [ CREATING, CHECKING_EMAIL, CHECKING_PHONE, READY, DELETED]
      operationId: controllers.user_controller.get_users
      responses:
        '200':
          description: The list of all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users
    post:
      summary: Create a user
      operationId: controllers.user_controller.post_users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestBody'
      responses:
        '202':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Format error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users
  /users/{username}:
    get:
      summary: Retrieve a user by username
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username of the user
      operationId: controllers.user_controller.get_user_by_username
      responses:
        '200':
          description: The found user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users
  /users/{userId}/details:
    get:
      summary: Get details about a given user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: Id of the user
      operationId: controllers.user_controller.get_user_details
      security:
        - basic: [ ]
        - bearerAuth: []
      responses:
        '200':
          description: Details of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '401':
          description: Not allowed error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users
  /users/{userId}:
    patch:
      summary: Reset user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatchBody'
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of the user
      operationId: controllers.user_controller.reset_password
      security:
        - basic: [ ]
        - bearerAuth: []
      responses:
        '200':
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accepted'
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users
  /security/questions:
    get:
      summary: Get all security questions
      operationId: controllers.security_controller.get_questions
      responses:
        '200':
          description: The list of all security questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Security
  /security/question/{questionId}:
    get:
      summary: Retrieve a question by id
      parameters:
        - in: path
          name: questionId
          schema:
            type: integer
          required: true
          description: Id of the question
      operationId: controllers.security_controller.get_question_by_id
      responses:
        '200':
          description: The question found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Security
  /security/question/random/{number}:
    get:
      summary: Get a list of random questions
      parameters:
        - in: path
          name: number
          schema:
            type: integer
          required: true
          description: The number of questions
      operationId: controllers.security_controller.get_random_list
      responses:
        '200':
          description: The list of random questions
          content:
            application/json:
              schema:
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
        '400':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Security
  /security/check-user:
    get:
      summary: Check if a user can authenticate
      operationId: controllers.security_controller.check_user
      security:
        - basic: [ ]
        - bearerAuth: []
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accepted'
        '401':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Security
  /security/validate-connection/{username}:
    post:
      summary: Validate a suspicious connection
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username of the user
        - in: query
          name: validationId
          schema:
            type: integer
          required: true
          description: Validation id given in the authentication error
        - in: query
          name: answer
          schema:
            type: string
          required: true
          description: Answer to the personal question given in the authentication error
      operationId: controllers.security_controller.validate_connection
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accepted'
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Security
  /security/refresh-token/:
    post:
      summary: To refresh a token
      parameters:
        - in: query
          name: refreshToken
          schema:
            type: string
          required: true
          description: Current refresh token
      operationId: controllers.security_controller.refresh_token
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accepted'
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Security
  /security/forgotten-password/{username}:
    post:
      summary: Reset the password of a user
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username of the user
      operationId: controllers.security_controller.forgotten_password
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accepted'
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Security
  /health:
    get:
      summary: Check if API is UP
      operationId: controllers.health_controller.health_check
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Up'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Health
tags:
  - name: Users
    description: Everything about users
  - name: Security
    description: Everything used for security purposes
  - name : Health
    description: Check if API is UP
components:
  securitySchemes:
    basic:
      type: http
      scheme: basic
      x-basicInfoFunc: authentication.basic_auth

    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: authentication.jwt_auth
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          example: "failed"
    Accepted:
      type: object
      properties:
        message:
          type: string
          example: "User is successfully connected"
    Up:
      type: object
      properties:
        message:
          type: string
          example: "API is UP"
    User:
      type: object
      properties:
        id:
          type: integer
          example: 23
        username:
          type: string
          example: "username"
        email:
          type: string
          example: "example@fake.com"
    UserDetails:
      type: object
      properties:
        id:
          type: integer
          example: 23
        username:
          type: string
          example: "username"
        email:
          type: string
          example: "example@fake.com"
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        devices:
          type: array
          items:
            type: string
            example: "iphone"
        status:
          type: string
          example: "READY"
    UserPatchBody:
      type: object
      required:
        - newPassword
      properties:
        newPassword:
          type: string
          example: "password"
    UserRequestBody:
      type: object
      required:
        - username
        - password
        - email
        - questions
        - device
        - phone
      properties:
        username:
          type: string
          example: "username"
        password:
          type: string
          example: "password"
        phone:
          type: string
          example: "+33102030405"
        email:
          type: string
          example: "example@fake.com"
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        questions:
          type: array
          items:
            $ref: '#/components/schemas/UserQuestionsRequestBody'
        device:
          type: string
          example: "iphone"
    Question:
      type: object
      properties:
        id:
          type: integer
          example: 23
        question:
          type: string
          example: "What's your pet's name ?"
    SuccessMassage:
      type: object
      properties:
        message:
          type: string
          example: "Email has been resend"
    QuestionsRequestBody:
      type: object
      required:
        - questions
      properties:
        questions:
          type: array
          items:
            type: string
          example: [ "What is your favorite color?", "What is your favorite season?" ]
    UserQuestionsRequestBody:
      type: object
      properties:
        questionId:
          type: integer
          example: 3
        response:
          type: string
          example: "blue"