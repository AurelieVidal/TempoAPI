from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e65353d6311a'
down_revision = '901fdf910d4d'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("ALTER TYPE status_enum ADD VALUE 'CHECKING_EMAIL'")
    op.execute("ALTER TYPE status_enum ADD VALUE 'CHECKING_PHONE'")

    op.alter_column(
        'user',
        'status',
        existing_type=postgresql.ENUM(
            'CREATING',
            'READY',
            'DELETED',
            name='status_enum'
        ),
        type_=sa.Enum(
            'CREATING',
            'CHECKING_EMAIL',
            'CHECKING_PHONE',
            'READY',
            'DELETED',
            name='status_enum'
        ),
        existing_nullable=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Cr√©ation de l'ancien type ENUM
    op.execute(
        "CREATE TYPE status_enum_old AS ENUM('CREATING', 'READY', 'DELETED')"
    )

    # Conversion explicite avec USING pour changer le type de la colonne status
    op.alter_column(
        'user',
        'status',
        existing_type=postgresql.ENUM(
            'CREATING',
            'CHECKING_EMAIL',
            'CHECKING_PHONE',
            'READY',
            'DELETED',
            name='status_enum'
        ),
        type_=postgresql.ENUM(
            'CREATING',
            'READY',
            'DELETED',
            name='status_enum_old'
        ),
        existing_nullable=False,
        postgresql_using="status::text::status_enum_old"  # Conversion explicite
    )

    # Suppression de l'ancien type ENUM
    op.execute("DROP TYPE status_enum")

    # Renommer le type ancien en nouveau
    op.execute("ALTER TYPE status_enum_old RENAME TO status_enum")
    # ### end Alembic commands ###
